from stable_baselines3 import PPO, A2C, DQN, DDPG

import random
from OpenAiGym.RLAlgorithmRunners.DqnRunner.DqnRunner import *
dimension = 4
two_to_power_dimension = 2**dimension
time_steps=24000000
root_dir="/home/oytun/PycharmProjects/research/OpenAiGym/"
eq_class = 0xab12
test_functions, _ = get_functions_from_walsh_spectrum(eq_class, dimension)
test_functions = test_functions.tolist()
functions = get_complement_function_list(dimension, test_functions)
output_prefix="functions_" + hex(eq_class) + "_absent"

env,model= dqn_runner_functions(functions,
dimension, time_steps, root_dir, output_prefix, KeyType.MONOMIAL_SET, test_functions=test_functions)

from OpenAiGym.RLAlgorithmRunners.RandomActionRunner.RandomActionRunner import *
import random
monte_carlo_times=3
n_times=1
dimension = 3
two_to_power_dimension = 2**dimension
functions = random.sample(range(0, 2**two_to_power_dimension), int(2**two_to_power_dimension*0.75))
output_folder_label="function_75_percent"
dir = random_action_monte_carlo_runner(monte_carlo_times, n_times, functions, dimension, output_folder_label, KeyType.MONOMIAL_SET)

env,model = dqn_runner_functions(functions, dimension, time_steps, root_dir, output_prefix, KeyType.MONOMIAL_SET,model)

from OpenAiGym.RLAlgorithmRunners.Utils.DumpOutputs import *
from OpenAiGym.RLAlgorithmRunners.Utils.DataHelperFunctions import *
dir = "/home/oytun/PycharmProjects/research/OpenAiGym/MinTermLpSrpobfEnv/Data/4dim/DQN/2022-03-21 16:29:02.564906_functions_range_0_to_65536_size_49152"

perf = load_json(dir,"performance_results")
mean_p,dev_p = runner_overall_performance(perf)

train = load_json(dir,"training_data_test_results")
mean_t,dev_t = runner_overall_performance(train)

functions = load_json(dir,"function_each_episode")
functions = numpy.unique(functions).tolist()
model=dqn_load_model(dir)
env = env_creator(functions, dimension, KeyType.MONOMIAL_SET)


from SigmaPiFrameworkPython.Utils.BooleanFunctionUtils import *
