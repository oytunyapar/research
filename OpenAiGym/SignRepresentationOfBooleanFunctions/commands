from OpenAiGym.SignRepresentationOfBooleanFunctions.EnvironmentRunners.RLRunner import *
dimension = 4
two_to_power_dimension = 2**dimension
time_steps=4000
root_dir="/home/oytun/PycharmProjects/research"
output_prefix="bent_functions_75_percentage"

from SigmaPiFrameworkPython.Utils.BooleanFunctionUtils import *
functions, _ = get_functions_from_walsh_spectrum(0xac90, dimension)
functions = functions.tolist()

import random
training_functions = random.sample(functions, int(len(functions)*0.75))
test_functions = list(set(functions) - set(training_functions))

env,model= rl_runner_functions(training_functions,
dimension, time_steps, RLModelType.RL_DQN, root_dir, output_prefix, key_type=KeyType.MONOMIAL_SET,
test_functions=test_functions)

output_prefix="functions_75_percentage"
training_functions = random.sample(range(0, 2**two_to_power_dimension), int(2**two_to_power_dimension*0.75))
test_functions = get_complement_function_list(dimension, training_functions)

model=model,
from OpenAiGym.SignRepresentationOfBooleanFunctions.EnvironmentRunners.Utils.EnvironmentHelperFunctions import *
env = env_creator(functions, dimension, KeyType.MONOMIAL_SET)

dir  = ""

from OpenAiGym.Utils.DumpOutputs import *
training_functions = load_json(dir,"parameters")["functions"]
test_functions = list(set(functions) - set(training_functions))

model = rl_load_model(dir)

env,model= rl_runner_functions(training_functions,
dimension, time_steps, RLModelType.RL_DQN, root_dir, output_prefix, key_type=KeyType.MONOMIAL_SET, model=model,
test_functions=test_functions)




from OpenAiGym.Utils.DumpOutputs import *
dir = "/home/oytun/PycharmProjects/research/Data/OpenAiGym/MinTermLpSrpobfEnv/4dim/DQN/2022-03-21 16:29:02.564906_functions_range_0_to_65536_size_49152"
functions = load_json(dir,"parameters")["functions"]
output_prefix="functions_range_0_to_65536_size_49152"
from SigmaPiFrameworkPython.Utils.BooleanFunctionUtils import *
dimension = 4
test_functions = get_complement_function_list(dimension, functions)
root_dir="/home/oytun/PycharmProjects/research"
time_steps=5000000
from OpenAiGym.SignRepresentationOfBooleanFunctions.EnvironmentRunners.RLRunner import *

for i in range(0,2):
    env,model= rl_runner_functions(functions,
    dimension, time_steps, RLModelType.RL_DQN, root_dir, output_prefix, key_type=KeyType.MONOMIAL_SET,test_functions=test_functions)

from SigmaPiFrameworkPython.Utils.BooleanFunctionUtils import *
functions, _ = get_functions_from_walsh_spectrum(0xac90, dimension)
functions = functions.tolist()

from OpenAiGym.SignRepresentationOfBooleanFunctions.EnvironmentRunners.RLRunner import *
dimension = 6
root_dir="/home/oytun/PycharmProjects/research"
functions = [9761403244881934472]
output_prefix="function_9761403244881934472"
test_functions=None

time_steps=2000000
env,model= rl_runner_functions(functions,
dimension, time_steps, RLModelType.RL_DQN, root_dir, output_prefix, key_type=KeyType.MONOMIAL_SET,test_functions=test_functions)

from OpenAiGym.EnvironmentRunners.RLRunner.RLRunner import *
dimension = 3
two_to_power_dimension = 2**dimension
time_steps=400000
root_dir="/home/oytun/PycharmProjects/research"

from OpenAiGym.Utils.DumpOutputs import *
dir = "/home/oytun/PycharmProjects/research/Data/OpenAiGym/MinTermLpSrpobfEnv/3dim/DQN/2022-05-01 13:57:15.831306_functions_range_0_to_256_size_192"
functions = load_json(dir,"parameters")["functions"]

import random
dimension = 3
two_to_power_dimension = 2**dimension
functions = random.sample(range(0, 2**two_to_power_dimension), int(2**two_to_power_dimension*0.75))

test_functions = get_complement_function_list(dimension, functions)
output_prefix="functions_range_0_to_256_size_192"

eq_class = 0xaa55
test_functions, _ = get_functions_from_walsh_spectrum(eq_class, dimension)
test_functions = test_functions.tolist()
functions = get_complement_function_list(dimension, test_functions)
output_prefix="functions_" + hex(eq_class) + "_absent"

env,model= dqn_runner_functions(functions,
dimension, time_steps, root_dir, output_prefix, KeyType.MONOMIAL_SET, test_functions=test_functions)

from OpenAiGym.RLAlgorithmRunners.RandomActionRunner.RandomActionRunner import *
import random
root_dir="/home/oytun/PycharmProjects/research"
monte_carlo_times=2
n_times=[1,2]
dimension = 3
two_to_power_dimension = 2**dimension
functions = random.sample(range(0, 2**two_to_power_dimension), int(2**two_to_power_dimension*0.75))
output_folder_label="function_75_percent"
random_action_monte_carlo_runner(monte_carlo_times, n_times, functions, dimension, root_dir, output_folder_label, KeyType.MONOMIAL_SET)

from OpenAiGym.RLAlgorithmRunners.Utils.DataHelperFunctions import *
from OpenAiGym.RLAlgorithmRunners.Utils.DumpOutputs import *
dir = "/home/oytun/PycharmProjects/research/Data/OpenAiGym/MinTermLpSrpobfEnv/4dim/DQN/2022-03-21 16:29:02.564906_functions_range_0_to_65536_size_49152"
functions = load_json(dir,"parameters")["functions"]

perf = load_json(dir,"performance_results")
mean_p,dev_p = runner_overall_performance(perf)

train = load_json(dir,"training_data_test_results")
mean_t,dev_t = runner_overall_performance(train)

model=dqn_load_model(dir)
env = env_creator(functions, dimension, KeyType.MONOMIAL_SET)


from SigmaPiFrameworkPython.Utils.BooleanFunctionUtils import *


for i in range(10):
    dir = "/home/oytun/PycharmProjects/research/Data/OpenAiGym/MinTermLpSrpobfEnv/4dim/RandomAction/2022-03-18 18:16:29.927266_Monte_Carlo_function_75_percent"

    output_directory = dir + "/" + str(i) + "/training"
    performance_results = load_json(output_directory, "performance_results")
    dump_json(runner_equivalence_class_performance(performance_results, 4), output_directory,
              "performance_mean_variance_equivalence_classes")

    perf_mean, perf_deviance = runner_overall_performance(performance_results)
    performance_mean_variance = {"perf_mean": perf_mean, "perf_deviance": perf_deviance}
    dump_json(performance_mean_variance, output_directory, "performance_mean_variance")

    output_directory = dir + "/" + str(i) + "/test"
    performance_results_test = load_json(output_directory, "performance_results")
    dump_json(runner_equivalence_class_performance(performance_results_test, 4), output_directory,
              "performance_mean_variance_equivalence_classes")

    perf_mean, perf_deviance = runner_overall_performance(performance_results_test)
    performance_mean_variance = {"perf_mean": perf_mean, "perf_deviance": perf_deviance}
    dump_json(performance_mean_variance, output_directory, "performance_mean_variance")

dir = "/home/oytun/PycharmProjects/research/Data/OpenAiGym/MinTermLpSrpobfEnv/4dim/RandomAction/2022-03-18 18:16:29.927266_Monte_Carlo_function_75_percent"
from OpenAiGym.RLAlgorithmRunners.RandomActionRunner.RandomActionRunner import *
monte_carlo_overall_performance_average(dir, True, 10)
monte_carlo_equivalence_class_performance_average(dir, True, 10,4)


obs, vec = model.policy.obs_to_tensor(env.reset())
a = numpy.argsort(model.q_net(obs).flatten().tolist())


import SigmaPiFrameworkPython.Utils.CombinationUtils as cmb
from SigmaPiFrameworkPython.Utils.DataStructureUtils import *
from SigmaPiFrameworkPython.SigmaPiLinearProgramming import *
inp, out = monomial_exclusion_all_subsets(0xbb55,4)
result = cmb.check_superset_inclusion(cmb.get_eliminated_subsets_size_dict(inp, out))
save_data_structure("/home/oytun/PycharmProjects/research/Data","0xbb55_elimination_relation_dictionary", result)


x = dict.fromkeys([*range(env.action_size)],0)
for i in range(1000):
    x[env.generate_action()] += 1

model.q_net(model.policy.obs_to_tensor(env.create_observation())[0])



