from Dqn.MinTermBfTraining import MinTermBfTrainingTensorflow
import numpy as np
dqnt = MinTermBfTrainingTensorflow.MinTermBfTrainingTensorflow(7,3,10000,[1500,1500], False, False, True)
dqnt.train_agent()
dqnt.check_agent(10)
dqnt.train_agent_multi_process()


import matplotlib.pyplot as plt
plt.plot(dqnt.reward_per_epoch)
plt.show()


import sys
sys.stdout = open('file.txt', 'w')
from Dqn.PolynomialRoot import PolynomialRoot
plyt = PolynomialRoot.PolynomialRoot([4,-2,8,-3],3,500,[1000,1000])
a = plyt.train_agent()
plyt.check_agent(10)
sys.stdout.close()

import matplotlib.pyplot as plt
plt.plot(plyt.reward_per_epoch)
plt.show()


Agent found: [1. 1. 3. 1. 1. 1. 1. 1.]
dqnt3.coefficients
array([ 0. , -0.5,  0. ,  0.5, -1. , -0.5,  0. ,  0.5])
dqnt3.function
7
dqnt3.function_diagonal
array([-1., -1., -1.,  1.,  1.,  1.,  1.,  1.], dtype=float32)


from tensorflow import keras
model = keras.models.load_model("dqn_2_dimension_1000_1000_agent")
from Dqn.MinTermBfTraining import MinTermBfTrainingTensorflow
import numpy as np
dqnt_q = MinTermBfTrainingTensorflow.MinTermBfTrainingTensorflow(0,2,1,[1,1], True)
dqnt_q.dqn_agent = model



from tensorflow import keras
model = keras.models.load_model("dqn_agent_3_dimension_function_7")
from Dqn.MinTermBfTraining import MinTermBfTrainingTensorflow
import numpy as np
dqnt_3 = MinTermBfTrainingTensorflow.MinTermBfTrainingTensorflow(0,3,1,[1,1], False)
dqnt_3.dqn_agent = model
