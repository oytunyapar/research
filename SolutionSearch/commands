from SolutionSearch.SolutionSearch import *
func = {4:[0xab12]}
func = {3:[172]}
func = {5:[0xa8dd9b51]}

solution_search(func,SearchPolicy.RL,1)
solution_search(func,SearchPolicy.GREEDY,10)
data = solution_search(func,SearchPolicy.REGULARIZATION,1)


from SolutionSearch.SolutionSearch import *
equivalence_classes_solution_search(SearchPolicy.GREEDY,10)

from SolutionSearch.SolutionSearch import *
dimension_solution_search(SearchPolicy.GREEDY,4,10)

from SolutionSearch.SolutionSearch import *
data = dimension_solution_search(SearchPolicy.REGULARIZATION,4,10)


from SolutionSearch.SolutionSearch import *

configurations = [
[LossFunction.MSE, RegularizationFunction.HOYER_SQUARE, False],
[LossFunction.MSE, RegularizationFunction.L1, False],
[LossFunction.MSE, RegularizationFunction.HOYER_SQUARE_AND_L1, False],
[LossFunction.RELU, RegularizationFunction.HOYER_SQUARE, True],
[LossFunction.RELU, RegularizationFunction.L1, True],
[LossFunction.RELU, RegularizationFunction.HOYER_SQUARE_AND_L1, True],
[LossFunction.EXPONENTIAL, RegularizationFunction.HOYER_SQUARE, True],
[LossFunction.EXPONENTIAL, RegularizationFunction.L1, True],
[LossFunction.EXPONENTIAL, RegularizationFunction.HOYER_SQUARE_AND_L1, True],
]

for configuration in configurations:
    conf = PruneRunnerConfiguration()
    conf.loss_function = configuration[0]
    conf.regularization_function = configuration[1]
    conf.regularization_strength = 0.05
    conf.simple_model = configuration[2]
    dimension_solution_search(SearchPolicy.REGULARIZATION,4,10,arguments=conf)


[configurations[3]]
func = {4:[0xab12]}
data = solution_search(func,SearchPolicy.REGULARIZATION,10,arguments=conf)